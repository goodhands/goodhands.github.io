{"hash":"d396db2e740a75309b7d278c339f92c8a26688fc","data":{"post":{"id":"e1ff3d7506ba977a9568e2fc11d1e598","title":"Optimizing Database Queries in large applications","excerpt":"Static analysis is the method of testing your code for basic logical, runtime or typographical exceptions without actually executing the code.","date":"12. October 2020","timeToRead":4,"path":"/optimizing-database-queries-in-large-applications/","canonical":"","category":{"id":"MySQL","title":"MySQL","path":"/category/my-sql/"},"author":{"id":"Samuel Olaegbe","title":"Samuel Olaegbe","path":"/author/samuel-olaegbe/"},"content":"<h3 id=\"background\"><a href=\"#background\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Background</h3>\n<p>In this article we will take a look at how to optimize database queries in a Laravel or PHP application with a MySQL database. At <a href=\"https://expenseng.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ExpenseNG</a>, our database keeps growing quickly as we record more government expenses from the Nigerian Open Treasury website. For an app that started at a bootcamp, we weren't prepared for the impact a growing database would have on the website. </p>\n<p>With these amount of records we had the responsibility of visualizing these data on our website in the way that has most meaningful impact and passed across the right information, which is <strong>Where is the government spending most money?</strong></p>\n<p>If you visit the <a href=\"https://expenseng.com/contractors\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">contractors</a> page on ExpenseNG, you will see the list of everyone that has received money from the government sorted by the contractor who got the most money in the last completed month and you can also see the total amount they got for that month. The data looks like this:</p>\n<pre class=\"language-json\"><code class=\"language-json\">Contractor name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\nTotal Amount Received<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\nMonth Ended<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span></code></pre>\n<h3 id=\"the-challenge\"><a href=\"#the-challenge\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>The Challenge</h3>\n<p>Now that we know what the data we need looks like, let's take a look at what it takes to retrieve this data from the database.</p>\n<p>Two tables are involved in this operation and they are the <code>contractors</code> and <code>payments</code> table. The contractors table holds the records of all everyone that has received money from the government and the payments table holds the records of every payment ever made and a reference to their recipients.</p>\n<p>The tables schema looks like this:</p>\n<pre class=\"language-json\"><code class=\"language-json\">payments<span class=\"token operator\">:</span>\n\t- amount (double)\n\t- date (DATE)\n\t- recipient (string)\n\ncontractors<span class=\"token operator\">:</span>\n\t- name (string)\n\t...</code></pre>\n<p>To sort the results from getting all the records from the contractors table by the total amount received by a contractor from the past month, that already sounds like a query involving two tables and we can achieve that with something like this:</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> contractors<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> payments <span class=\"token keyword\">WHERE</span> \nrecipient <span class=\"token operator\">=</span> contractors<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> total <span class=\"token keyword\">from</span> contractors \n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> total <span class=\"token keyword\">desc</span></code></pre>\n<p>From the query above, we have a sub-select statement which helps us to calculate the total money received by all recipients and we can use the result from that sub-query to create a new column in our query which we can now use to sort our final result. The new column created by this sub-query is given an alias of <code>total</code>. </p>\n<p>The query above doesn't include the logic for fetching only results from the month ended, so we will modify the query further below:</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> contractors<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> payments \n<span class=\"token keyword\">WHERE</span> recipient <span class=\"token operator\">=</span> contractors<span class=\"token punctuation\">.</span>name \n<span class=\"token operator\">AND</span> <span class=\"token keyword\">date</span> <span class=\"token operator\">BETWEEN</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">09</span><span class=\"token operator\">-</span><span class=\"token number\">01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2020</span><span class=\"token operator\">-</span><span class=\"token number\">09</span><span class=\"token operator\">-</span><span class=\"token number\">31</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> total \n<span class=\"token keyword\">from</span> contractors \n<span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span> total <span class=\"token keyword\">desc</span></code></pre>\n<p>In the above query, we have added a new constraint to the sub-query which is <code>BETWEEN</code>. As you know this allows us to select only results that start from the first value and end on the second value.</p>\n<h3 id=\"new-problem\"><a href=\"#new-problem\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>New problem</h3>\n<p>The query above works fine when you have a few records in your database, but when working with a database with thousands of records this can easily result in the query taking several minutes to execute or even resulting in a request timeout error on the server as the server doesn't receive a response for too long.</p>\n<p>We can easily solve this problem by adding an index to the columns that are pivotal to our query, from the above query the columns we should add an index to are:</p>\n<ul>\n<li><code>contractors.name</code></li>\n<li><code>payments.recipient</code></li>\n<li><code>payments.date</code></li>\n<li><code>payments.amout</code></li>\n</ul>\n<p>The query to add an index to our columns will look like this:</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> contractors <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">INDEX</span> name_index <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span></code></pre>\n<p>Or if you are using Laravel migrations:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">//database/migrations/2020_09_20_102101_add_index_to_payments_table.php</span>\n<span class=\"token scope\">Schema<span class=\"token punctuation\">::</span></span><span class=\"token function\">table</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'payments'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>Blueprint <span class=\"token variable\">$table</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'recipient'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'amount'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token variable\">$table</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'date'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Now we can reduce our query execution time greatly by adding indexes. On ExpenseNG, our queries went from timing out after several minutes to a about 0.02 seconds with a pagination of 20 results per page.</p>\n<p>We can further improve our query execution time by only selecting the columns that we need, we will change this line to look like this:</p>\n<pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> contractors<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> contractors<span class=\"token punctuation\">.</span><span class=\"token keyword\">date</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token function\">SUM</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">from</span> payments \n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre>\n<h3 id=\"using-laravels-eloquent\"><a href=\"#using-laravels-eloquent\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Using Laravel's Eloquent</h3>\n<p>We can achieve the same queries as we did above in Eloquent by using the <code>addSelect</code> method to create a sub-query to our original query:</p>\n<pre class=\"language-php\"><code class=\"language-php\"><span class=\"token scope\">Contractor<span class=\"token punctuation\">::</span></span><span class=\"token function\">select</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'name'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'shortname'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">addSelect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'total'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token scope\">Payment<span class=\"token punctuation\">::</span></span><span class=\"token function\">selectRaw</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'SUM(amount)'</span><span class=\"token punctuation\">)</span>\n\t\t    <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">whereColumn</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'recipient'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'contractors.name'</span><span class=\"token punctuation\">)</span>\n\t\t    <span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">whereBetween</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'date'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token variable\">$monthStart</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$monthEnd</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'total'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'desc'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">paginate</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Here we are using Eloquent's advanced sub-queries which gives us a nice and comprehensive API to retrieve results from our model. If we wanted, we could lazy load our <code>Contractor</code> model relationships by chaining the the select method with <code>with('payments')->paginate(20)</code>.</p>\n<p>And that is how you optimize database queries on a large MySQL database.  </p>\n<blockquote>\n<p>Adding an index to a table makes <code>UPDATE</code> queries run for a longer time, so you should not use them on tables that will get update frequently.</p>\n</blockquote>\n<h3 id=\"resources\"><a href=\"#resources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Resources</h3>\n<ul>\n<li><a href=\"https://dzone.com/articles/how-to-optimize-mysql-queries-for-speed-and-perfor\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://dzone.com/articles/how-to-optimize-mysql-queries-for-speed-and-perfor</a></li>\n<li><a href=\"https://laravel.com/docs/8.x/migrations#indexes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://laravel.com/docs/8.x/migrations#indexes</a></li>\n<li><a href=\"https://laravel.com/docs/8.x/eloquent#advanced-subqueries\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://laravel.com/docs/8.x/eloquent#advanced-subqueries</a></li>\n</ul>\n","cover":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/large-mysql-db.4ca991b.241187f68b97ee1a889effc56f45aff8.jpg","size":{"width":970,"height":546},"sizes":"(max-width: 970px) 100vw, 970px","srcset":["/assets/static/large-mysql-db.1b91758.241187f68b97ee1a889effc56f45aff8.jpg 480w","/assets/static/large-mysql-db.4ca991b.241187f68b97ee1a889effc56f45aff8.jpg 970w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 970 546' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-15e0ff934bcba71077197cb8b0880d3c'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-15e0ff934bcba71077197cb8b0880d3c)' width='970' height='546' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAAAAAAAAAAAQCAwUBBgj/xAApEAACAQMDAwMEAwAAAAAAAAABAgMABBESITEFE1FBYXEUIjIzYqHB/8QAGAEAAwEBAAAAAAAAAAAAAAAAAAECAwT/xAAgEQADAAIDAAIDAAAAAAAAAAAAAQIREgMhMTJBUWGB/9oADAMBAAIRAxEAPwD6poJA52rjMFUk1l9Vjurq1ZbS5W2mzkSMuoAfFVE7P8E3TlZSyafcXzXHlRIy7MAo3JNJorx2qrrV5lQDJ2DHHNVi4Dokd2oiaQaTG5yD7DzVaC2HhMpI9/FW81lGB4tAsSojXZo24I9j6VIX8MXeMzmMxDU%2bsYAHOfim%2bPPxDbHpp0Ul0%2b9jvbZJ4S3bfdSwwSPOKdBzWbly8MpNUsoquPwHzSsv6ZM4xpPPHFOTfqNKalzpJGT6eauPBUZNtcNb2sBjMeCwAVnyCP4mtDvW9yzRTFWZcMUb096pltBLCPpz2hqyUZNj7EUrKGW5lDhgO3sGTbg8H/K6MKu/syWZ6JLfqRO9ndRzQqjFcj7VIznccjzWfb3M1z0mWaaaSV2hZtYiwDzuqn%2bgedqOhI8vS1EbudSMqntCNR4IX0HimWjj6L05Zb%2bSWWNDgufvYk%2ba1amW5XuTBVVSuSuljv8AuP2XdBMps4VYSg437rZbOfXHrXoI8hd6otNDW8ciLgOoYbY5FMCuPlrZtnXxzrKRXck4UelLdtMYKgiiiifBsmoAGAMCusquMMAR70UUwOpGi/ioHwKsFFFSxkhUhRRUMD//2Q==' /%3e%3c/svg%3e"}}},"context":{}}