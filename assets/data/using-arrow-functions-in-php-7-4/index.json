{"hash":"5ce9a144858d8a7426e7502698b0e9ea76252406","data":{"post":{"id":"1c1b5f9d2b6294221e7be03ed09656be","title":"Using arrow functions in PHP 7.4","excerpt":"PHP 7.4 has just been released with a shorter way of writing functions using the same arrow convention in languages like Javascript","date":"12. March 2020","timeToRead":2,"canonical":"https://devloader.hashnode.dev/using-arrow-functions-in-php-74-ck7oqwvor00jf64s1hdfr63ig","category":{"id":"PHP","title":"PHP","path":"/category/php/"},"author":{"id":"Samuel Olaegbe","title":"Samuel Olaegbe","path":"/author/samuel-olaegbe/"},"content":"<p>Last November, PHP 7.4 was <a href=\"https://www.php.net/releases/7_4_0.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">released</a> and the entire community was so excited with the new features that this release brings with it. You can now build faster apps with PHP and also be excited while you work on them with these new release! See the full list of features <a href=\"https://www.php.net/releases/7_4_0.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>.</p>\n<p>Now let's dig into what the arrow function is and how to use them in your PHP based projects. If you're a JavaScript developer, the following code snippet should look familiar to you:</p>\n<pre class=\"language-js line-numbers\"><code class=\"language-js\">users<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token arrow operator\">=></span> <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<p>This is a shorter version of what would have looked like this:</p>\n<pre class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;=</span> users<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span></span></code></pre>\n<p>With the above code we were using multiple lines for something that could have been done using a single line and we also had to use a loop construct and indexes and when you begin to do this all over your codebase it could become  quite cumbersome and hard to read compared to a single line function.</p>\n<p>A simple example in PHP would be:</p>\n<pre class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n   <span class=\"token comment\">//</span>\n   <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">index</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n       <span class=\"token scope\">Users<span class=\"token punctuation\">::</span></span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n           <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n              <span class=\"token keyword\">return</span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">author</span> \n           <span class=\"token punctuation\">}</span>\n       <span class=\"token punctuation\">)</span>\n\n   <span class=\"token punctuation\">}</span></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Now, the code above could be simplified as follows (in PHP 7.4):</p>\n<pre class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n   <span class=\"token scope\">Users<span class=\"token punctuation\">::</span></span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$post</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token property\">author</span>\n   <span class=\"token punctuation\">)</span></span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"syntax\"><a href=\"#syntax\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Syntax</h2>\n<p>It is important to note that the <code>return</code> keyword is not used in the arrow function, although it returns a value from the expression on the right hand side.</p>\n<p>A simple way to think of it is this:</p>\n<pre class=\"language-php line-numbers\"><code class=\"language-php\">    <span class=\"token variable\">$output</span> <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> expression<span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span></span></code></pre>\n<blockquote>\n<p>The <code>fn</code> keyword is just a shorter way of writing <code>function</code></p>\n</blockquote>\n<h2 id=\"by-value-variable-binding\"><a href=\"#by-value-variable-binding\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>By-value variable binding</h2>\n<p>The RFC for arrow functions in PHP 7.4 explains the use of by-value variable which basically binds a variable used in the closure such that it cannot be modified and any attempt to modify it will be silently ignored:</p>\n<pre class=\"language-php line-numbers\"><code class=\"language-php\"><span class=\"token variable\">$x</span> <span class=\"token operator\">=</span> <span class=\"token double-quoted-string string\">\"foo\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token variable\">$output</span> <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$x</span> <span class=\"token punctuation\">.</span> <span class=\"token double-quoted-string string\">\" bar\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// this is silently ignored</span>\n\n<span class=\"token variable\">$output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$x</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//foo</span><span class=\"line-numbers-rows\" aria-hidden=\"true\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"additional-resources\"><a href=\"#additional-resources\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Additional resources</h4>\n<ul>\n<li><a href=\"https://wiki.php.net/rfc/arrow_functions_v2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://wiki.php.net/rfc/arrow_functions_v2</a></li>\n<li><a href=\"https://stitcher.io/blog/short-closures-in-php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stitcher.io/blog/short-closures-in-php</a></li>\n</ul>\n<p>And that is all about the arrow function in PHP 7.4. Please feel free to drop your comments, suggestions and questions! </p>\n<p>Follow me on twitter <a href=\"https://twitter.com/devloader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@devloader</a></p>\n","cover":{"type":"image","mimeType":"image/png","src":"/assets/static/arrow-fn-php7-4.230370a.61dd10036131265bdcb9cca223b61090.png","size":{"width":1156,"height":988},"sizes":"(max-width: 1156px) 100vw, 1156px","srcset":["/assets/static/arrow-fn-php7-4.1b91758.61dd10036131265bdcb9cca223b61090.png 480w","/assets/static/arrow-fn-php7-4.230370a.61dd10036131265bdcb9cca223b61090.png 1156w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1156 988' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-62cca0ba6826efc6ed9ac79d675e6565'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-62cca0ba6826efc6ed9ac79d675e6565)' width='1156' height='988' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAA3CAYAAAC8TkynAAAACXBIWXMAABYlAAAWJQFJUiTwAAAI/ElEQVRo3uWWeW%2bTVxbG8xkqFalSpUqVZjSjGU01ooWBFsoaApSwL4EQlixkIwvZIWnCFhIIZHEWb3HseHe8xnbseMnqQAIEQqEl0BLaUlWzaj7CM/fe168xHtMwNJFGef/46bz3nOece%2b5DCCRYh87AEixmOMfL4AqVwxkqW7K4QhWwjxXi7kMvns/9AwlXJUdxo/s4GsVH0dCZCvt4xZLGNloJ91QRqi%2b4sG/XCyQ0So7BPnEWZlJoEKfBNFwOy3glLGNLk76RKjhvn0FBqRNrVv2AhLq2VNRLjqNBegL0Wz9UCdPYWZhGq5YkhuFzsE%2bWoLDChY1riQG64bNQDpZD5auAikR61o%2bcW7Joh6phnixDQbkbG9YQAzTD1dCO1kSg56VMb7AGxlvlOM0boByqQTSqJU5PsBa6m5XIKxvgDFCQhJCQB%2bqgnqhCLm%2bALFiHXyQQJwbm6XnTvljNfLPm64t3jslJ/eehDJ1DTpkHG6kB4sB5CIlO30V0j1cjuzRsQIf/IhaL9v%2bDWbF9osFLkIzVIKvUyxnQ5ruEVkJbFK87t8bhbfta36Ivnja2r3WevlbvZXSO1iKTN%2bDG4GXEp34e3qTv8hv21v%2bqvub/ZVfPFYhG6pBRMsgZcM17BYLC04CW4QtIL/Fx/xNsIAlBMdCIpqGLOEkM2EQNuDxwFYLCfQ2Nwcs4fsZPDPgeCRdIQlC4mlAfqMcx3oBadxMYrnCM/Y6hLja3EH2/0FsXb94b3hm3z3kdF/1XkFYc4Ayodt2AoOhvRp2vEUd5A6qczRAUjhZUD15FanEQm6kB5f0tEBT2VlQNNuFwUdiAEkcbBIVNhHLvdaQUDXEGFNlFEBS2dpR4mnGIN%2bA0ScSjwN6BQnsn923rIPF1cHWqLbTHr9NI5/FE1wuiZvD3vtRwvdxsbj5f53O8lj/zfawWmRGFtQNFAy04WDjMGZBr7UQsebZOZFvacdLUwr7j1aPJsXQwbaa5La6WRjovyyxiMbbGxY7IvXQen8%2bxcrMz%2bloJbaxG56SbWlmeftPe9D7uzM%2bh33TWf%2b1v6UK%2buw37eQNOkUQ02VYxMswdKHOrIJ3ykcHtLEfJstCFxOShnUxDazQWOxUwzIyjfWKAzaA6Cu05Ge4vdSlxKWhC/ZCZ9VMd7c0Ja3JtEjavzm8gv6V1rEYpcMjZ7K5bHlwfc7C96AwZ2c04E0IN0Z52yKC7Pwbt/VHk26U4bmpj9YqBXjKzg90feaNZjByXCPsKR5BIDciwkAdHkWWV4oihDZKpAJ78/WdcCJjhmb0P5zfTMD%2bchOXhFLlonGEh55aQG5UeHR799QUUd4YgnvSja9JH9HfhfnwP8ttBGB5MwPV4GoFvH6J3ehTGBzcjDJDZ3aTP%2b2QG%2bQ4FGkccsD26TbRfoY0YWuxU4e5PzzD03SPc/P4J0488%2bxpjc98g9HwW/eSew/o2NIzY4Xv6AAe0zTgf6MOP//4nav0mpBnbkWmRvHxjnwRZznbsLRjlDDhhliIeo3OPMfnjtyxq7ofII25BP3OLLPYIDmLGnRdzePavv5HHBlHkVDNdbcCC4Wd0sSdk4a9h%2bmoSD37%2bAcrpMajvhciy06zue/oQQfKg0blZopmCe3YGM0RX4zOjacxNHjwH66M7xOQJ5DmUmP7pOaq8xvAek2TOPYyTx9OZ%2bf0qHNCJWK1%2buB%2b59h52H92tOeRBip78pFpkL99mkiG9vxN7mAHPkZDWJ0M0qSYpMm1KVPusyLD2oGHUjTNuA8o8RmTbVWid8KPQqUXJgIH8e2pGjr2X6cs9JuzTduDKiBvXxjyo8PaxHOVGaJDojaxWRs4Xgv24NOxkM2j97KAF18e9yCJz8vs1qAvYma6E3JtOdqgks3ZrRCglM07ZVKyvlmjSyGNSDGIc65PjS78Nx81ytvdR8gaqzXWoccQoZfXIG41yHHN0YXfBGGfAEVM3YjlMRAf0Ehb36cQ4ZJDiICHFKMNebRc5y9j5gJ7LUR09H%2b1TMD3VHCT9nEYSPktZjeb3k8h9Sxn7dZwmxSBj0PrB8J387DQymz8fCs%2blu6aGd%2bbO8kj%2bUHjf1Nj3GUiPXYKdp8MGHDIqEI8UUw%2bLh0lMoecwL889Ec0r%2bj4ljlh6WaS6I1Y1Ugm0TvOsZlYh1Ub%2bdKzcN6%2bh34dJPdWmYXp2Nisjs6P3iL47%2bv4U/mzsiXy/goHkbVIknx7HFmrAfpJYMIxK7FXLsEPcQqIUW1sbsf78WWxvb0KyTIQ1lWeQePUi1p4rZXFzw3ms%2b7KC6ZKarzDtutpKlt%2btEmOnXISdpG9Bd9QrccAqx458YsDnxIA9ehUWBiX2GFTYpVFgRzf5O6btQZLoOj7OO4XV5cXY0noNH504ik%2brSvFJfjZWFORidWUJVpUVY1VpIdPR3PLsDKwsymf9yT0SxsLtSNCpsNfSjS/yQ5wBO3W9WFD0auwyarDLoGbnHSpymZI43qtAoqg5rFOxuMuoZbpkrSqcU0VmsDkGDWNB99OS2WYFtvMGfEESi4aOoNdw6DRINupZjBDRaWJYxJ00ZD75/bQ1b4IzYKtWi0WFXPgq2qiojTrHaBZrHzXBpEISb0CiRgdB0atHolGNLXk3kUQN2KjWQ1CoDNhIfkcl5t7iDFjXa4SgUBnxuUGHTbwBa1QmCAplHz7Tk5%2bE3EliwBwSVpOEoOgxY5XOiA05YQNW9lggKBQWrNCasD5nClupAR8rrBAU3TYs1/RhHW/AnxV2ROiOIV4uuvZr%2bxSvqS3mnXI7PlJbsDb7NmfAn7odEBQyB/7Ya8Ua3oA/yPshKGRO/F5lx2en7nAG/E7mgqCQuvBbpQOf8gb8RuqGoJC48WGPE6tP3cU2asCHkgEICrEHHyhc%2bEvWNGfAB2IvBEWXF%2b93u7GSN%2bD9rkEIis5BvCf3YEXWPWxbRwx4r9MPDl9UjCVe3Y/5e9%2b2z/eaWry%2b193rj3/u8GOZzItPMqkBz5DwLim82yUgOgN4Rz6I5Zn3sZ0asKx1GO%2b2CIdlzcN4pyOI5ekznAG7055g7bZZbEiexXohsIOLm5OeImnTd/gPenGNYnZNKBkAAAAASUVORK5CYII=' /%3e%3c/svg%3e"}}},"context":{}}